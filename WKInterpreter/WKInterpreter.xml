<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WKInterpreter</name>
    </assembly>
    <members>
        <member name="T:WKInterpreter.DimensionType">
            <summary>
            Defines the point dimensions.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XY">
            <summary>
            2D dimension, integer value 0.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XYZ">
            <summary>
            3D dimension using the Z component, integer value 1000.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XYM">
            <summary>
            3D dimension using the M component, integer value 2000.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XYZM">
            <summary>
            4D dimension, integer value 3000.
            </summary>
        </member>
        <member name="T:WKInterpreter.DimensionTypeExtension">
            <summary>
            Extension methods for the DimensionType enum.
            </summary>
        </member>
        <member name="M:WKInterpreter.DimensionTypeExtension.GetEnumTypes">
            <summary>
            Return all the dimension types in it's wkt form. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.DimensionTypeExtension.Parse(System.String)">
            <summary>
            Parse a dimension type from WKT.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.DimensionTypeExtension.WktEncode(WKInterpreter.DimensionType)">
            <summary>
            Codification encode for WKT.
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="T:WKInterpreter.EndianType">
            <summary>
            Defines which endian type is encoded.
            </summary>
        </member>
        <member name="T:WKInterpreter.Geometry">
            <summary>
            Represents a geometric object.
            </summary>
        </member>
        <member name="P:WKInterpreter.Geometry.Endian">
            <summary>
            Endiand codification.
            </summary>
        </member>
        <member name="P:WKInterpreter.Geometry.GeometryType">
            <summary>
            Type of the geometry.
            </summary>
        </member>
        <member name="M:WKInterpreter.Geometry.#ctor">
            <summary>
            Default constructor for an empty geometry.
            </summary>
        </member>
        <member name="M:WKInterpreter.Geometry.Deserialize(System.String)">
            <summary>
            Reads a Well-Known-Text geometry.
            </summary>
            <example>
            Format: [geometry] [dimension] [empty?] ([geometric_information])
            </example>
            <remarks>
            Not implemented: [SRID];[WKT]
            </remarks>
            <param name="str"></param>
        </member>
        <member name="T:WKInterpreter.GeometryType">
            <summary>
            Well Known format, Geometry type.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.GEOMETRY">
            <summary>
            Not defined geometry.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.POINT">
            <summary>
            Geometric point.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.BREPSOLID">
            <summary>
            Brep solid, only compatible with XYZ dimension.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.AFFINEPLACEMENT">
            <summary>
            Affine Placement, only compatible with XY and XYZ dimensions.
            </summary>
        </member>
        <member name="P:WKInterpreter.LineString.Points">
            <summary>
            Points forming the line.
            </summary>
        </member>
        <member name="P:WKInterpreter.LineString.GeometryType">
            <summary>
            Geometry type of the object, LINESTRING.
            </summary>
        </member>
        <member name="T:WKInterpreter.Point">
            <summary>
            Point class
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.M">
            <summary>
            M component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.GeometryType">
            <summary>
            Geometry type of the object, POINT.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.Dimension">
            <summary>
            Dimensions of the object, based on the non null values.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.IsEmpty">
            <summary>
            X and Y the components of the object are null or NaN.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.IsValid">
            <summary>
            Return if the object is a valid one based on it's components.
            </summary>
        </member>
        <member name="M:WKInterpreter.Point.#ctor">
            <summary>
            Default constructor, creates an empty point.
            </summary>
        </member>
        <member name="M:WKInterpreter.Point.IsNear(WKInterpreter.Point,System.Double)">
            <summary>
            Check if the point is near or at the same coordinate as this one.
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.IReader.Read">
            <summary>
            Start reading the Stream of the reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.IReader.ReadPoint(WKInterpreter.DimensionType)">
            <summary>
            Reads the geometry of a point ([geometry])
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WkbReader.ReadNextInt">
            <summary>
            Read the next int in the byte array.
            This method advances the current index position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WkbReader.ReadNextDouble">
            <summary>
            Read the next double in the byte array.
            This method advances the current index position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WkbReader.extractBytes(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Extract a number of bytes from the current array.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="lastIndex"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.#ctor(System.String)">
            <summary>
            Reads a Well-Known-Text geometry.
            </summary>
            <example>
            Format: [geometry] [dimension] [empty?] ([geometric_information])
            </example>
            <param name="line"></param>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.ReadDimension">
            <summary>
            Read the dimension of the Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readGroup(System.Char,System.Char,System.Int32@)">
            <summary>
            Read a string and return the first string enclosed between the selected characters.
            </summary>
            <param name="open"></param>
            <param name="close"></param>
            <param name="lasIndex">Index of the closing character.</param>
            <returns>The string between the 2 tokens.</returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readUntilToken(System.String[])">
            <summary>
            Read until finds the first token.
            This method advances the current index position.
            </summary>
            <param name="tokens"></param>
            <returns>Return the found token.</returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readUntilToken``1(System.String[])">
            <summary>
            Read until finds the first token.
            This method advances the current index position.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tokens"></param>
            <returns>Return the found token.</returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readUntil(System.Char,System.Boolean)">
            <summary>
            Reads until a match is found, returns the substracted string.
            This method advances the current index position.
            </summary>
            <param name="match"></param>
            <param name="jumpToken"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.tryReadUntil(System.Char,System.String@)">
            <summary>
            Try to read until the match, returns the substring between the match and the current index.
            This method advances the current index position.
            </summary>
            <param name="match"></param>
            <param name="str">Substring between the match and the current index. Null if the match isn't found.</param>
            <returns></returns>
        </member>
    </members>
</doc>
