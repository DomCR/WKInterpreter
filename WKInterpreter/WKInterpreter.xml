<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WKInterpreter</name>
    </assembly>
    <members>
        <member name="T:WKInterpreter.DimensionType">
            <summary>
            Defines the point dimensions.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XY">
            <summary>
            2D dimension, integer value 0.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XYZ">
            <summary>
            3D dimension using the Z component, integer value 1000.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XYM">
            <summary>
            3D dimension using the M component, integer value 2000.
            </summary>
        </member>
        <member name="F:WKInterpreter.DimensionType.XYZM">
            <summary>
            4D dimension, integer value 3000.
            </summary>
        </member>
        <member name="T:WKInterpreter.EndianType">
            <summary>
            Defines which endian type is encoded.
            </summary>
        </member>
        <member name="T:WKInterpreter.Extensions.DimensionTypeExtensions">
            <summary>
            Extension methods for the DimensionType enum.
            </summary>
        </member>
        <member name="M:WKInterpreter.Extensions.DimensionTypeExtensions.GetEnumTypes">
            <summary>
            Return all the dimension types in it's wkt form. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Extensions.DimensionTypeExtensions.Parse(System.String)">
            <summary>
            Parse a dimension type from WKT.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Extensions.DimensionTypeExtensions.Parse(System.Int32,WKInterpreter.GeometryType@)">
            <summary>
            Parse a int into a dimension and a geometry type.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Extensions.DimensionTypeExtensions.WktEncode(WKInterpreter.DimensionType)">
            <summary>
            Codification encode for WKT.
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Extensions.StringExtensions.ToByteArray(System.String)">
            <summary>
            Gets a string and returns an array of bytes.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Extensions.StringExtensions.ReadUntil(System.String,System.Char)">
            <summary>
            Reads a string until it finds a character.
            </summary>
            <param name="line"></param>
            <param name="c">Character to find.</param>
            <returns></returns>
        </member>
        <member name="T:WKInterpreter.Geometry">
            <summary>
            Represents a geometric object.
            </summary>
        </member>
        <member name="P:WKInterpreter.Geometry.Endian">
            <summary>
            Endiand codification.
            </summary>
        </member>
        <member name="P:WKInterpreter.Geometry.GeometryType">
            <summary>
            Type of the geometry.
            </summary>
        </member>
        <member name="M:WKInterpreter.Geometry.#ctor">
            <summary>
            Default constructor for an empty geometry.
            </summary>
        </member>
        <member name="M:WKInterpreter.Geometry.Deserialize(System.String)">
            <summary>
            Reads a Well-Known-Text geometry.
            </summary>
            <example>
            Format: [geometry] [dimension] [empty?] ([geometric_information])
            </example>
            <remarks>
            Not implemented: [SRID];[WKT]
            </remarks>
            <param name="str"></param>
        </member>
        <member name="T:WKInterpreter.GeometryCollection`1">
            <summary>
            Collection of geometries.
            </summary>
            <typeparam name="T">Geometry type to define the collection.</typeparam>
        </member>
        <member name="P:WKInterpreter.GeometryCollection`1.GeometryType">
            <summary>
            Geometry type of the object, GEOMETRYCOLLECTION. 
            </summary>
        </member>
        <member name="P:WKInterpreter.GeometryCollection`1.Dimension">
            <summary>
            Shared dimension for all the elements int the collection.
            </summary>
            <remarks>
            If the element is not valid may be for a different dimension in an element.
            </remarks>
        </member>
        <member name="P:WKInterpreter.GeometryCollection`1.IsEmpty">
            <summary>
            The collection is empty.
            </summary>
        </member>
        <member name="P:WKInterpreter.GeometryCollection`1.IsValid">
            <summary>
            GeometryCollection base validation.
            </summary>
        </member>
        <member name="P:WKInterpreter.GeometryCollection`1.m_geometries">
            <summary>
            List of geometric objects inside the collection.
            </summary>
        </member>
        <member name="M:WKInterpreter.GeometryCollection`1.#ctor">
            <summary>
            Default constructor for an empty collection.
            </summary>
        </member>
        <member name="M:WKInterpreter.GeometryCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize a collection.
            </summary>
            <param name="geometries">Enumerable with the geometries to initialize the object.</param>
        </member>
        <member name="M:WKInterpreter.GeometryCollection`1.AddGeometry(`0)">
            <summary>
            Add a none empty geometry into the collection.
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:WKInterpreter.GeometryCollection">
            <summary>
            Collection of generic geometries.
            </summary>
        </member>
        <member name="T:WKInterpreter.GeometryType">
            <summary>
            Well Known format, Geometry type.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.GEOMETRY">
            <summary>
            Not defined geometry.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.POINT">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.LINESTRING">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.POLYGON">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.MULTIPOINT">
            <summary>
            Collection of points.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.MULTILINESTRING">
            <summary>
            Collection fo polylines.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.MULTIPOLYGON">
            <summary>
            Collection of polygons.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.GEOMETRYCOLLECTION">
            <summary>
            Collection of geometric objects.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.BREPSOLID">
            <summary>
            Brep solid, only compatible with XYZ dimension.
            </summary>
        </member>
        <member name="F:WKInterpreter.GeometryType.AFFINEPLACEMENT">
            <summary>
            Affine Placement, only compatible with XY and XYZ dimensions.
            </summary>
        </member>
        <member name="T:WKInterpreter.LineString">
            <summary>
            LineString class, implements a geometry collection of points.
            </summary>
        </member>
        <member name="P:WKInterpreter.LineString.Points">
            <summary>
            List of points inside the line.
            </summary>
        </member>
        <member name="P:WKInterpreter.LineString.GeometryType">
            <summary>
            Geometry type of the object, LINESTRING.
            </summary>
        </member>
        <member name="P:WKInterpreter.LineString.IsValid">
            <summary>
            LineString validation.
            </summary>
        </member>
        <member name="M:WKInterpreter.LineString.IsClosed">
            <summary>
            Check if the line is closed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.LineString.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current LineString.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.LineString.Equals(WKInterpreter.LineString)">
            <summary>
            Determines whether the specified LineString is equal to the current LineString.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.LineString.GetHashCode">
            <summary>
            Generate the hash code for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WKInterpreter.MultiLineString">
            <summary>
            MultiLineString class, implements a geometry collection of MultiLineStrings.
            </summary>
        </member>
        <member name="P:WKInterpreter.MultiLineString.Lines">
            <summary>
            Lines in the multi line string.
            </summary>
        </member>
        <member name="P:WKInterpreter.MultiLineString.GeometryType">
            <summary>
            Geometry type of the object, MULTILINESTRING.
            </summary>
        </member>
        <member name="M:WKInterpreter.MultiLineString.Equals(System.Object)">
            <summary>
            Equality between this object and another
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.MultiLineString.Equals(WKInterpreter.MultiLineString)">
            <summary>
            Equality between this object and another
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.MultiLineString.GetHashCode">
            <summary>
            HashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WKInterpreter.MultiPoint.GeometryType">
            <summary>
            Geometry type of the object, MULTIPOINT.
            </summary>
        </member>
        <member name="T:WKInterpreter.Point">
            <summary>
            Point class.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.M">
            <summary>
            M component.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.GeometryType">
            <summary>
            Geometry type of the object, POINT.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.Dimension">
            <summary>
            Dimensions of the object, based on the non null values.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.IsEmpty">
            <summary>
            X and Y the components of the object are null or NaN.
            </summary>
        </member>
        <member name="P:WKInterpreter.Point.IsValid">
            <summary>
            Return if the object is a valid one based on it's components.
            </summary>
        </member>
        <member name="M:WKInterpreter.Point.#ctor">
            <summary>
            Default constructor, creates an empty point.
            </summary>
        </member>
        <member name="M:WKInterpreter.Point.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initialize a 2D point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:WKInterpreter.Point.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initialize a 3D point, using the z component.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:WKInterpreter.Point.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initialize a 4D point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="m"></param>
        </member>
        <member name="M:WKInterpreter.Point.#ctor(System.Double[],WKInterpreter.DimensionType)">
            <summary>
            Initalize a point using an array and a dimension.
            </summary>
            <param name="components"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:WKInterpreter.Point.IsNear(WKInterpreter.Point,System.Double)">
            <summary>
            Check if the point is near or at the same coordinate as this one.
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Point.DistanceFrom(WKInterpreter.Point)">
            <summary>
            Returns the distance from another point.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Point.Equals(System.Object)">
            <summary>
            Equality between this object and another
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Point.Equals(WKInterpreter.Point)">
            <summary>
            Equality between this object and another
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Point.GetHashCode">
            <summary>
            HashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WKInterpreter.Readers.IReader">
            <summary>
            Interface for readers
            </summary>
        </member>
        <member name="M:WKInterpreter.Readers.IReader.Read">
            <summary>
            Start reading the Stream of the reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.IReader.ReadPoint(WKInterpreter.DimensionType)">
            <summary>
            Reads the geometry of a point ([geometry])
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WkbReader.ReadNextInt">
            <summary>
            Read the next int in the byte array.
            This method advances the current index position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WkbReader.ReadNextDouble">
            <summary>
            Read the next double in the byte array.
            This method advances the current index position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WkbReader.extractBytes(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Extract a number of bytes from the current array.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="lastIndex"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.#ctor(System.String)">
            <summary>
            Reads a Well-Known-Text geometry.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.ReadArgs">
            <summary>
            Read the string buffer as arguments
            </summary>
            <example>
            Format: [geometry] [dimension] [empty?] ([geometric_information])
            </example>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.ReadDimension">
            <summary>
            Read the dimension of the Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readGroup(System.Char,System.Char,System.String,System.Int32@)">
            <summary>
            Read a string and return the first string enclosed between the selected characters.
            </summary>
            <param name="open"></param>
            <param name="close"></param>
            <param name="line"></param>
            <param name="lastIndex">Index of the closing character.</param>
            <returns>The string between the 2 tokens.</returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readUntilToken(System.String[])">
            <summary>
            Read until finds the first token.
            This method advances the current index position.
            </summary>
            <param name="tokens"></param>
            <returns>Return the found token.</returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readUntilToken``1(System.String[])">
            <summary>
            Read until finds the first token.
            This method advances the current index position.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tokens"></param>
            <returns>Return the found token.</returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.readUntil(System.Char,System.Boolean)">
            <summary>
            Reads until a match is found, returns the substracted string.
            This method advances the current index position.
            </summary>
            <param name="match"></param>
            <param name="jumpToken"></param>
            <returns></returns>
        </member>
        <member name="M:WKInterpreter.Readers.WktReader.tryReadUntil(System.Char,System.String@)">
            <summary>
            Try to read until the match, returns the substring between the match and the current index.
            This method advances the current index position.
            </summary>
            <param name="match"></param>
            <param name="str">Substring between the match and the current index. Null if the match isn't found.</param>
            <returns></returns>
        </member>
        <member name="P:WKInterpreter.Surface.IsValid">
            <summary>
            Surface validation.
            </summary>
        </member>
        <member name="T:CSUtilities.Mutation">
            <summary>
            Class that allows to modify, copy or control objects outside their own methods.
            </summary>
        </member>
        <member name="M:CSUtilities.Mutation.CloneSerializable``1(``0)">
            <summary>
            Clone the serializable object into a new instance.
            </summary>
            <typeparam name="T">Type of the serializable object.</typeparam>
            <param name="source">Object to clone.</param>
            <returns>The new instance of the object.</returns>
        </member>
        <member name="M:CSUtilities.Mutation.DeepClone``1(System.Object)">
            <summary>
            Deep copy of an object using reflection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns>A copy of the object</returns>
        </member>
        <member name="M:CSUtilities.Mutation.ExplodeObject``1(``0)">
            <summary>
            store the info of an object in a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns>Returns a dictionary with [paramName, paramValue]</returns>
        </member>
        <member name="M:CSUtilities.Mutation.Serialize(System.String,System.Object)">
            <summary>
            Serialize an object into a file.
            </summary>
            <param name="path">File path.</param>
            <param name="obj">Object to serialize.</param>
        </member>
        <member name="M:CSUtilities.Mutation.Deserialize``1(System.String)">
            <summary>
            Deserialize an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns>The deserializated object.</returns>
        </member>
        <member name="M:CSUtilities.Mutation.Deserialize(System.String)">
            <summary>
            Deserialize an object.
            </summary>
            <param name="path"></param>
            <returns>The deserializated object.</returns>
        </member>
        <member name="T:CSUtilities.TaskManager">
            <summary>
            Class to control tasks and processes.
            </summary>
        </member>
        <member name="M:CSUtilities.TaskManager.ExecuteWithTimeLimit(System.Int32,System.Action)">
            <summary>
            Execute a method in a time span if the method don't finish at the time is canceled.
            Example:
                Action method = () => TaskExample(10);
                bool test = TaskManager.ExecuteWithTimeLimit(3000, method);
                if the action isn't finish in 3 seconds will stop the execution and return false.
            </summary>
            <param name="timeSpan">Time in milliseconds.</param>
            <param name="codeBlock">Block of code, or method to execute in the timespan.</param>
            <returns>bool indicating if the action has finished.</returns>
        </member>
        <member name="M:CSUtilities.Extensions.ByteExtensions.ToStringHex(System.Byte[])">
            <summary>
            Convert a byte array into a hex string array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.GetLines(System.String)">
            <summary>
            Return an array with all the lines.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ToByteArray(System.String)">
            <summary>
            Gets a string and returns an array of bytes.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ReadBetween(System.String,System.Char,System.Char)">
            <summary>
            Returns the first string between 2 characters.
            </summary>
            <param name="line"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ReadUntil(System.String,System.Char)">
            <summary>
            Reads a string until it finds a character.
            </summary>
            <param name="line"></param>
            <param name="c">Character to find.</param>
            <returns></returns>
        </member>
    </members>
</doc>
